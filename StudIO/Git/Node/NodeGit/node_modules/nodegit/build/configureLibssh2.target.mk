# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := configureLibssh2
### Rules for action "configure":
quiet_cmd_binding_gyp_configureLibssh2_target_configure = ACTION binding_gyp_configureLibssh2_target_configure $@
cmd_binding_gyp_configureLibssh2_target_configure = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; node utils/configureLibssh2.js

.: obj := $(abs_obj)
.: builddir := $(abs_builddir)
.: export BUILT_FRAMEWORKS_DIR := ${abs_builddir}
.: export BUILT_PRODUCTS_DIR := ${abs_builddir}
.: export CONFIGURATION := ${BUILDTYPE}
.: export DYLIB_INSTALL_NAME_BASE := @rpath
.: export EXECUTABLE_NAME := configureLibssh2.node
.: export EXECUTABLE_PATH := configureLibssh2.node
.: export FULL_PRODUCT_NAME := configureLibssh2.node
.: export LD_DYLIB_INSTALL_NAME := @rpath/configureLibssh2.node
.: export MACH_O_TYPE := mh_bundle
.: export PRODUCT_NAME := configureLibssh2
.: export PRODUCT_TYPE := com.apple.product-type.library.dynamic
.: export SDKROOT := /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk
.: export SRCROOT := ${abs_srcdir}/
.: export SOURCE_ROOT := ${SRCROOT}
.: export TARGET_BUILD_DIR := ${abs_builddir}
.: export TEMP_DIR := ${TMPDIR}
.: TOOLSET := $(TOOLSET)
.: $(srcdir)/. FORCE_DO_CMD
	$(call do_cmd,binding_gyp_configureLibssh2_target_configure)

all_deps += .
action_binding_gyp_configureLibssh2_target_configure_outputs := .


### Rules for final target.
# Build our special outputs first.
$(builddir)/configureLibssh2.node: | $(action_binding_gyp_configureLibssh2_target_configure_outputs)

# Preserve order dependency of special output on deps.
$(action_binding_gyp_configureLibssh2_target_configure_outputs): | 

LDFLAGS_Debug := \
	-undefined dynamic_lookup \
	-Wl,-no_pie \
	-Wl,-search_paths_first \
	-mmacosx-version-min=10.7 \
	-arch x86_64 \
	-L$(builddir) \
	-stdlib=libc++

LIBTOOLFLAGS_Debug := \
	-undefined dynamic_lookup \
	-Wl,-no_pie \
	-Wl,-search_paths_first

LDFLAGS_Release := \
	-undefined dynamic_lookup \
	-Wl,-no_pie \
	-Wl,-search_paths_first \
	-mmacosx-version-min=10.7 \
	-arch x86_64 \
	-L$(builddir) \
	-stdlib=libc++

LIBTOOLFLAGS_Release := \
	-undefined dynamic_lookup \
	-Wl,-no_pie \
	-Wl,-search_paths_first

LIBS :=

$(builddir)/configureLibssh2.node: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(builddir)/configureLibssh2.node: LIBS := $(LIBS)
$(builddir)/configureLibssh2.node: GYP_LIBTOOLFLAGS := $(LIBTOOLFLAGS_$(BUILDTYPE))
$(builddir)/configureLibssh2.node: TOOLSET := $(TOOLSET)
$(builddir)/configureLibssh2.node:  FORCE_DO_CMD
	$(call do_cmd,solink_module)

all_deps += $(builddir)/configureLibssh2.node
# Add target alias
.PHONY: configureLibssh2
configureLibssh2: $(builddir)/configureLibssh2.node

# Short alias for building this executable.
.PHONY: configureLibssh2.node
configureLibssh2.node: $(builddir)/configureLibssh2.node

# Add executable to "all" target.
.PHONY: all
all: $(builddir)/configureLibssh2.node

